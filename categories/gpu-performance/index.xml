<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gpu-performance on Lei.Chat()</title>
    <link>https://www.lei.chat/categories/gpu-performance/</link>
    <description>Recent content in gpu-performance on Lei.Chat()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018 - 2025 &lt;a href=&#34;https://www.lei.chat/&#34;&gt;Lei Zhang&lt;/a&gt;
</copyright>
    <lastBuildDate>Wed, 25 Dec 2024 15:13:01 -0800</lastBuildDate><atom:link href="https://www.lei.chat/categories/gpu-performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Triton Compiler Development Tips</title>
      <link>https://www.lei.chat/posts/triton-compiler-development-tips/</link>
      <pubDate>Wed, 25 Dec 2024 15:13:01 -0800</pubDate>
      
      <guid>https://www.lei.chat/posts/triton-compiler-development-tips/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://triton-lang.org/&#34;&gt;Triton&lt;/a&gt; provides an elegant solution to program GPU kernels in Python,
positioning itself as a critical component in the modern AI software stack.
To deliver performance and portability, it leverages a compiler, the capability
of which determines the potential.
Hacking the compiler internals is not a simple task.
Here are some tips hopefully useful to folks.
I&amp;rsquo;ll try to keep this blog post updated periodically.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeGen Performant Convolution Kernels for Mobile GPUs</title>
      <link>https://www.lei.chat/posts/codegen-performant-convolution-kernels-for-mobile-gpus/</link>
      <pubDate>Sun, 19 Sep 2021 19:17:07 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/codegen-performant-convolution-kernels-for-mobile-gpus/</guid>
      <description>&lt;p&gt;This blog post talks about how to generate performant code for convolution ops
using MLIR’s multiple levels of abstractions and transformations.
I initially created it for targeting ARM Mali GPUs in IREE. But given it is
just direct tiling and vectorization, it should be widely applicable.&lt;/p&gt;
&lt;p&gt;I will walk through the lowering steps, so if you are interested to know how to
organize MLIR’s various dialects/patterns together to achieve similar tasks,
this blog post might also be useful.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sampling Performance Counters from Mobile GPU Drivers</title>
      <link>https://www.lei.chat/posts/sampling-performance-counters-from-gpu-drivers/</link>
      <pubDate>Thu, 08 Jul 2021 19:16:41 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/sampling-performance-counters-from-gpu-drivers/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;../android-linux-gpu-drivers-internals-and-resources&#34;&gt;previous blog post&lt;/a&gt; I gave a general introduction
to GPU driver internals in Android/Linux systems. Following up with it, today
I will explain how a specific functionality, hardware performance counter
(perf counter) queries, is handled in both Qualcomm Adreno and ARM Mali drivers,
by walking through the kernel driver source code.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
