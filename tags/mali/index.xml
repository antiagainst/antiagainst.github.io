<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mali on Lei.Chat()</title>
    <link>https://www.lei.chat/tags/mali/</link>
    <description>Recent content in mali on Lei.Chat()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018 - 2021 &lt;a href=&#34;https://www.lei.chat/&#34;&gt;Lei Zhang&lt;/a&gt;
</copyright>
    <lastBuildDate>Sun, 19 Sep 2021 19:17:07 -0400</lastBuildDate><atom:link href="https://www.lei.chat/tags/mali/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CodeGen Performant Convolution Kernels for Mobile GPUs</title>
      <link>https://www.lei.chat/posts/codegen-performant-convolution-kernels-for-mobile-gpus/</link>
      <pubDate>Sun, 19 Sep 2021 19:17:07 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/codegen-performant-convolution-kernels-for-mobile-gpus/</guid>
      <description>&lt;p&gt;This blog post talks about how to generate performant code for convolution ops
using MLIR’s multiple levels of abstractions and transformations.
I initially created it for targeting ARM Mali GPUs in IREE. But given it is
just direct tiling and vectorization, it should be widely applicable.&lt;/p&gt;
&lt;p&gt;I will walk through the lowering steps, so if you are interested to know how to
organize MLIR’s various dialects/patterns together to achieve similar tasks,
this blog post might also be useful.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sampling Performance Counters from Mobile GPU Drivers</title>
      <link>https://www.lei.chat/posts/sampling-performance-counters-from-gpu-drivers/</link>
      <pubDate>Thu, 08 Jul 2021 19:16:41 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/sampling-performance-counters-from-gpu-drivers/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;../android-linux-gpu-drivers-internals-and-resources&#34;&gt;previous blog post&lt;/a&gt; I gave a general introduction
to GPU driver internals in Android/Linux systems. Following up with it, today
I will explain how a specific functionality, hardware performance counter
(perf counter) queries, is handled in both Qualcomm Adreno and ARM Mali drivers,
by walking through the kernel driver source code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android/Linux GPU Drivers: Internals and Resources</title>
      <link>https://www.lei.chat/posts/android-linux-gpu-drivers-internals-and-resources/</link>
      <pubDate>Mon, 05 Jul 2021 18:20:07 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/android-linux-gpu-drivers-internals-and-resources/</guid>
      <description>&lt;p&gt;Recently I have been working on a library that needs to directly interact with
GPU kernel drivers from various vendors on Android/Linux systems. Compared to
various GPU APIs, information at this level is quite sparse; so it is not a
straightforward task, to say the least, and ends up requiring me to piece
multiple sources together to figure out the details. So I am logging these driver
internals and resources down in case it can be useful to others that are
interested in these low-level bits.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
