<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spirv on Lei.Chat()</title>
    <link>https://www.lei.chat/tags/spirv/</link>
    <description>Recent content in spirv on Lei.Chat()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018 - 2022 &lt;a href=&#34;https://www.lei.chat/&#34;&gt;Lei Zhang&lt;/a&gt;
</copyright>
    <lastBuildDate>Sat, 01 Apr 2023 14:02:36 -0700</lastBuildDate><atom:link href="https://www.lei.chat/tags/spirv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Single-node ML Runtime Foundation</title>
      <link>https://www.lei.chat/posts/single-node-ml-runtime-foundation/</link>
      <pubDate>Sat, 01 Apr 2023 14:02:36 -0700</pubDate>
      
      <guid>https://www.lei.chat/posts/single-node-ml-runtime-foundation/</guid>
      <description>&lt;p&gt;Previous blog posts overviewed the MLIR dialect hierarchy for &lt;a href=&#34;../mlir-codegen-dialects-for-machine-learning-compilers/&#34;&gt;kernel code
generation&lt;/a&gt; (CodeGen) and zoomed in on the
&lt;a href=&#34;../mlir-linalg-dialect-and-patterns/&#34;&gt;Linalg&lt;/a&gt; and &lt;a href=&#34;../mlir-vector-dialect-and-patterns/&#34;&gt;Vector&lt;/a&gt; dialects among them.
Now I will switch to discuss the runtime side a bit, in order to provide
a holistic view of MLIR-based machine learning (ML) compilers.
This one touches the foundation and basics, including the target landscape,
runtime requirements and designs to meet thereof.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MLIR CodeGen Dialects for Machine Learning Compilers</title>
      <link>https://www.lei.chat/posts/mlir-codegen-dialects-for-machine-learning-compilers/</link>
      <pubDate>Sun, 20 Feb 2022 15:21:03 -0500</pubDate>
      
      <guid>https://www.lei.chat/posts/mlir-codegen-dialects-for-machine-learning-compilers/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;../compilers-and-irs-llvm-ir-spirv-and-mlir/&#34;&gt;initial blog post&lt;/a&gt; in this series captured my overall take
on the evolution trends of compilers and IRs.
It also touched on &lt;a href=&#34;../compilers-and-irs-llvm-ir-spirv-and-mlir/#llvm-ir&#34;&gt;LLVM IR&lt;/a&gt;, &lt;a href=&#34;../compilers-and-irs-llvm-ir-spirv-and-mlir/#spir-v&#34;&gt;SPIR-V&lt;/a&gt;, and
&lt;a href=&#34;../compilers-and-irs-llvm-ir-spirv-and-mlir/#mlir&#34;&gt;MLIR&lt;/a&gt;, explaining the problems they are addressing and design
focuses thereof.
Today I will expand on MLIR and talk about its dialect hierarchy for machine
learning (ML) compilers systematically.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>机器学习编译器代码生成相关 MLIR Dialect</title>
      <link>https://www.lei.chat/zh/posts/mlir-codegen-dialects-for-machine-learning-compilers/</link>
      <pubDate>Sun, 20 Feb 2022 15:21:03 -0500</pubDate>
      
      <guid>https://www.lei.chat/zh/posts/mlir-codegen-dialects-for-machine-learning-compilers/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;../compilers-and-irs-llvm-ir-spirv-and-mlir/&#34;&gt;这个系列的首篇文章&lt;/a&gt;中我分享了对编译器和中间表示 (IR) 演进趋势的整体理解，
也讨论了 &lt;a href=&#34;../compilers-and-irs-llvm-ir-spirv-and-mlir/#llvm-ir&#34;&gt;LLVM IR&lt;/a&gt;, &lt;a href=&#34;../compilers-and-irs-llvm-ir-spirv-and-mlir/#spir-v&#34;&gt;SPIR-V&lt;/a&gt;, 和 &lt;a href=&#34;../compilers-and-irs-llvm-ir-spirv-and-mlir/#mlir&#34;&gt;MLIR&lt;/a&gt; 所要解决的问题以及相应的设计着眼点。
今天对 MLIR 做进一步展开，分析一下机器学习相关的 dialect 体系。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编译器与中间表示: LLVM IR, SPIR-V, 以及 MLIR</title>
      <link>https://www.lei.chat/zh/posts/compilers-and-irs-llvm-ir-spirv-and-mlir/</link>
      <pubDate>Sun, 23 Jan 2022 10:54:37 -0500</pubDate>
      
      <guid>https://www.lei.chat/zh/posts/compilers-and-irs-llvm-ir-spirv-and-mlir/</guid>
      <description>&lt;p&gt;编译器 (compiler) 通常是各种提高开发效率的工具链中不可或缺的部分。
编译器一般被为黑箱，吃进高层次的源程序，产生语义不变的低层次机器码。
当然，编译器也是有其内部结构的，中间表示 (intermediate representation)
串联起编译器内各层级和模块。&lt;/p&gt;
&lt;p&gt;中间表示对编译器至关重要，也如编译器一样百花齐放。
我在日常工作中有幸能够涉及三种主流编译器中间表示或者基础设施——LLVM IR, SPIR-V, 以及 MLIR,
尤其对于后两种，我都参与了早期的开发。
我打算用一系列文章记录自己对于编译器以及中间表示的理解，希望对感兴趣的人有所帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Compilers and IRs: LLVM IR, SPIR-V, and MLIR</title>
      <link>https://www.lei.chat/posts/compilers-and-irs-llvm-ir-spirv-and-mlir/</link>
      <pubDate>Sat, 08 Jan 2022 13:58:34 -0500</pubDate>
      
      <guid>https://www.lei.chat/posts/compilers-and-irs-llvm-ir-spirv-and-mlir/</guid>
      <description>&lt;p&gt;Compilers are often critical components in various development toolchains that
boosts developer productivity.
A compiler is normally used as a monolithic black box that consumes a high-level
source program and produces a semantically-equivalent low-level one.
It is still structured inside though; what flows between internal layers
are called intermediate representations (IRs).&lt;/p&gt;
&lt;p&gt;IRs are critical to compilers. Like there are many compilers, there are also
many IRs in use.
I&amp;rsquo;m fortunate to have direct experience with three major schools of IRs or
infrastructures thus far&amp;mdash;LLVM IR, SPIR-V, MLIR, particularly extensively for
the last two, where I both joined development in an early stage.
So I&amp;rsquo;d like to write a series of blog posts to log down my understanding of
compilers and IRs. Hopefully it could be beneficial to others.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeGen Performant Convolution Kernels for Mobile GPUs</title>
      <link>https://www.lei.chat/posts/codegen-performant-convolution-kernels-for-mobile-gpus/</link>
      <pubDate>Sun, 19 Sep 2021 19:17:07 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/codegen-performant-convolution-kernels-for-mobile-gpus/</guid>
      <description>&lt;p&gt;This blog post talks about how to generate performant code for convolution ops
using MLIR’s multiple levels of abstractions and transformations.
I initially created it for targeting ARM Mali GPUs in IREE. But given it is
just direct tiling and vectorization, it should be widely applicable.&lt;/p&gt;
&lt;p&gt;I will walk through the lowering steps, so if you are interested to know how to
organize MLIR’s various dialects/patterns together to achieve similar tasks,
this blog post might also be useful.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shader Toolchain: HLSL in Vulkan</title>
      <link>https://www.lei.chat/posts/shader-toolchain-hlsl-in-vulkan/</link>
      <pubDate>Sat, 12 May 2018 17:44:14 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/shader-toolchain-hlsl-in-vulkan/</guid>
      <description>&lt;p&gt;On &lt;a href=&#34;https://www.khronos.org/events/2018-vulkan-developer-day-in-montreal&#34;&gt;2018 Vulkan Developer Day in Montréal&lt;/a&gt;, I gave a talk
regarding “Shader Toolchain: HLSL in Vulkan”. Here are the links to the
video recording, slides, and documentation/downloads for DirectX Shader
Compiler (DXC) SPIR-V CodeGen.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HLSL for Vulkan: Semantic Strings and Location Numbers</title>
      <link>https://www.lei.chat/posts/hlsl-for-vulkan-semantic-strings-and-location-numbers/</link>
      <pubDate>Fri, 11 May 2018 13:15:45 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/hlsl-for-vulkan-semantic-strings-and-location-numbers/</guid>
      <description>&lt;p&gt;This blog post discusses how HLSL semantic strings are translated into
SPIR-V location numbers for Vulkan shader inter-stage interface matching
in the &lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler/blob/master/docs/SPIR-V.rst&#34;&gt;SPIR-V CodeGen&lt;/a&gt; of &lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler&#34;&gt;DirectXShaderCompiler&lt;/a&gt; (DXC).
It is one of the “HLSL for Vulkan” series.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HLSL for Vulkan: Resources</title>
      <link>https://www.lei.chat/posts/hlsl-for-vulkan-resources/</link>
      <pubDate>Tue, 24 Apr 2018 16:39:21 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/hlsl-for-vulkan-resources/</guid>
      <description>&lt;p&gt;This blog post discusses how to manage resources in HLSL for Vulkan, using the
&lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler/blob/master/docs/SPIR-V.rst&#34;&gt;SPIR-V CodeGen&lt;/a&gt; of &lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler&#34;&gt;DirectXShaderCompiler&lt;/a&gt; (DXC).
It is one of the “HLSL for Vulkan” series.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HLSL for Vulkan: Matrices</title>
      <link>https://www.lei.chat/posts/hlsl-for-vulkan-matrices/</link>
      <pubDate>Wed, 18 Apr 2018 20:13:20 -0400</pubDate>
      
      <guid>https://www.lei.chat/posts/hlsl-for-vulkan-matrices/</guid>
      <description>&lt;p&gt;This blog post discusses how HLSL matrices are translated into SPIR-V for Vulkan
consumption in the &lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler/blob/master/docs/SPIR-V.rst&#34;&gt;SPIR-V CodeGen&lt;/a&gt; of &lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler&#34;&gt;DirectXShaderCompiler&lt;/a&gt;.
It is one of the “HLSL for Vulkan” series.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
